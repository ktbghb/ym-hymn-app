<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>영미네 찬송가 Player</title>
    <!-- 구글 폰트와 아이콘을 사용하기 위한 코드입니다. -->
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <!-- Tailwind CSS를 사용해서 앱을 예쁘게 꾸며줍니다. -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Noto Sans KR 폰트를 기본 글씨체로 설정합니다. */
        body {
            font-family: 'Noto Sans KR', sans-serif;
        }
        /* 현재 재생 중인 곡을 표시하기 위한 스타일입니다. */
        .playing {
            background-color: #dbeafe; /* 연한 파란색 */
            color: #1e40af; /* 진한 파란색 */
            font-weight: bold;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen">

    <div class="w-full max-w-md mx-auto bg-white rounded-2xl shadow-lg overflow-hidden">
        
        <!-- 1. 앱 제목 부분 -->
        <header class="bg-blue-600 text-white p-6">
            <h1 class="text-2xl font-bold text-center">영미네 찬송가 Player</h1>
        </header>

        <!-- 2. 음악 플레이어 화면 부분 -->
        <div class="p-6">
            <div class="bg-gray-200 rounded-lg p-4 text-center mb-4">
                <p class="text-gray-600">현재 재생 중</p>
                <!-- 현재 재생 중인 곡의 제목이 여기에 나타납니다. -->
                <h2 id="current-song-title" class="text-xl font-bold text-gray-800 truncate">선택된 곡 없음</h2>
            </div>
            
            <!-- 오디오 플레이어 태그입니다. 눈에 보이지는 않아요. -->
            <audio id="audio-player" class="w-full" controls></audio>
        </div>

        <!-- 3. 찬송가 목록 부분 -->
        <div id="playlist" class="px-6 pb-6 h-96 overflow-y-auto">
            <!-- 찬송가 목록이 자바스크립트에 의해 여기에 자동으로 추가됩니다. -->
        </div>

    </div>

    <script>
        // --- 중요! 이 부분에 GitHub 찬송가 정보를 직접 넣어주세요 ---

        const songs = [
            // 예시) 
            // { 
            //   title: "1장 만복의 근원 하나님", 
            //   url: "https://raw.githubusercontent.com/사용자아이디/저장소이름/main/파일명.mp3" 
            // },
            // 위 예시처럼 GitHub에서 복사한 '진짜 음악 주소'를 넣어주세요.           
            { 
              title: "1장 만복의 근원 하나님",
              url: "https://raw.githubusercontent.com/ktbghb/ym-hymn-app/main/1.mp3" 
            },
            { 
              title: "2장 찬양 성부 성자 성령", 
              url: "https://raw.githubusercontent.com/ktbghb/ym-hymn-app/main/2.mp3" 
            },
            { 
              title: "3장 이 천지간 만물들아",
              url: "https://raw.githubusercontent.com/ktbghb/ym-hymn-app/main/3.mp3" 
            },
            { 
              title: "4장 (성부 성자와 성령)", 
              url: "https://raw.githubusercontent.com/ktbghb/ym-hymn-app/main/4.mp3" 
            },
            { 
              title: "5장 (이 천지간 만물들아)", 
              url: "https://raw.githubusercontent.com/ktbghb/ym-hymn-app/main/5.mp3" 
            },
             { 
              title: "6장 (목소리 높여서)", 
              url: "https://raw.githubusercontent.com/ktbghb/ym-hymn-app/main/6.mp3" 
            },
             { 
              title: "7장 (성부 성자 성령)",
              url: "https://raw.githubusercontent.com/ktbghb/ym-hymn-app/main/7.mp3" 
            },           
        ];

        // --- 여기부터는 앱을 동작하게 하는 코드입니다. 수정하지 않아도 괜찮아요. ---

        const audioPlayer = document.getElementById('audio-player');
        const playlistElement = document.getElementById('playlist');
        const currentSongTitleElement = document.getElementById('current-song-title');
        let currentPlayingItem = null;

        // 오디오 플레이어에서 오류가 발생했을 때 알려주는 기능을 추가합니다.
        audioPlayer.addEventListener('error', () => {
            console.error("오디오 재생 오류가 발생했습니다. GitHub 링크가 올바른지, 저장소가 Public으로 설정되어 있는지 확인해주세요.");
            currentSongTitleElement.textContent = "파일 재생 실패! (링크 확인 필요)";
            if (currentPlayingItem) {
                currentPlayingItem.classList.remove('playing');
                currentPlayingItem.classList.add('bg-red-100', 'text-red-700');
                currentPlayingItem.querySelector('i').textContent = 'error_outline';
            }
        });

        // 찬송가 목록을 화면에 보여주는 함수
        function renderPlaylist() {
            playlistElement.innerHTML = '';
            songs.forEach((song, index) => {
                if (!song || !song.title || !song.url) {
                    console.error("잘못된 찬송가 정보가 있습니다:", song);
                    return; 
                }

                const songItem = document.createElement('div');
                songItem.className = 'p-4 mb-2 rounded-lg cursor-pointer hover:bg-gray-200 transition-all flex items-center justify-between';
                
                songItem.innerHTML = `
                    <span>${song.title}</span>
                    <i class="material-icons text-gray-400">play_circle_outline</i>
                `;

                songItem.addEventListener('click', () => {
                    playSong(index, songItem);
                });

                playlistElement.appendChild(songItem);
            });
        }

        // 특정 노래를 재생하는 함수
        function playSong(index, songItem) {
            const song = songs[index];

            if (!song.url || song.url.startsWith("여기에")) {
                console.error('음악 파일 주소가 비어있습니다. 코드를 확인해주세요!');
                currentSongTitleElement.textContent = "음악 주소 오류!";
                return;
            }
            
            const errorItem = playlistElement.querySelector('.bg-red-100');
            if(errorItem) {
                errorItem.classList.remove('bg-red-100', 'text-red-700');
                const icon = errorItem.querySelector('i');
                if (icon) icon.textContent = 'play_circle_outline';
            }

            audioPlayer.src = song.url;
            audioPlayer.load(); 
            
            audioPlayer.play().catch(error => {
                console.error("음악 재생 시도 중 오류:", error);
            });

            currentSongTitleElement.textContent = song.title;

            if (currentPlayingItem) {
                currentPlayingItem.classList.remove('playing');
                currentPlayingItem.querySelector('i').textContent = 'play_circle_outline';
            }

            songItem.classList.add('playing');
            songItem.querySelector('i').textContent = 'pause_circle_outline';
            currentPlayingItem = songItem;
        }

        renderPlaylist();
    </script>
</body>
</html>
